<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>## Batches input from the DB, executes a specified ad-hoc Cypher query and collects results into a CSV ##&#xd;
* Triggerred manually&#xd;
* Archives the result&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/NETESOLUTIONS/ERNIE/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>INPUT_DATA_SQL</name>
          <description>A SQL query without a semicolon. Use ordering to enable resumable pipelines.

Examples:
* ```
SELECT cited_1, cited_2, first_co_cited_year
  FROM cc2.ten_year_cocit_union_freq11_freqsum_bins
 WHERE bin = 1
 ORDER BY cited_1, cited_2
```
* ```
SELECT cited_1, cited_2, first_co_cited_year
  FROM cc2.ten_year_cocit_union_freq11_freqsum_bins
 WHERE scopus_frequency &gt;= 10
 ORDER BY cited_1, cited_2
```</description>
          <defaultValue>SELECT cited_1, cited_2
  FROM cc2.ten_year_cocit_union_freq11_freqsum_bins
where scopus_frequency between 10 and 49
 ORDER BY cited_1, cited_2</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BATCH_SIZE</name>
          <description>An approximate number of records per batch.
If the number of input records &gt; `BATCH_SIZE`, process in parallel in batches.
Batches are sliced by GNU Parallel in bytes.

Currently needs to be added to code</description>
          <defaultValue>25</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INPUT_FILE</name>
          <description>Written as an RFC 4180-compliant CSV (with EOLs set to `\n`) containing a header row.
Temporary CSV files are written into the same directory.
Make sure you have 2 x {output_size} free space.

WARNING: Without clean start option, the output file, if exists, will be appended to.

The output file should be writeable by both `neo4j` and `ernie_admin` users. Note: `/tmp` disk is limited to 1G.
Use unique output files per build to enable concurrent execution.
* The file is deleted after succesful collection (back to the `ernie2` server)</description>
          <defaultValue>kinetics.csv</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WORKING_DIRECTORY</name>
          <description></description>
          <defaultValue>/neo4j_data1/cc2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTPUT_FILE</name>
          <description></description>
          <defaultValue>kintetics_results.csv</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList">
        <string>Neo4j</string>
      </categories>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/NETESOLUTIONS/ERNIE/</url>
        <credentialsId>d02dfdd6-1f23-416e-a398-d26accdf9129</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.SparseCheckoutPaths>
        <sparseCheckoutPaths>
          <hudson.plugins.git.extensions.impl.SparseCheckoutPath>
            <path>/P2_studies/cc2</path>
          </hudson.plugins.git.extensions.impl.SparseCheckoutPath>
        </sparseCheckoutPaths>
      </hudson.plugins.git.extensions.impl.SparseCheckoutPaths>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Deploy
mkdir -p build
chmod g+w build
rm -f build/*

echo -e &apos;\nExporting input data...&apos;
psql -v ON_ERROR_STOP=on --quiet -c &quot;COPY ($INPUT_DATA_SQL) TO STDOUT (FORMAT CSV, HEADER ON);&quot; &gt; ${INPUT_FILE}
echo -e &apos;Exported.\n&apos;</command>
    </hudson.tasks.Shell>
    <jenkins.plugins.publish__over__ssh.BapSshBuilderPlugin plugin="publish-over-ssh@1.20.1">
      <delegate>
        <consolePrefix>SSH: </consolePrefix>
        <delegate plugin="publish-over@0.22">
          <publishers>
            <jenkins.plugins.publish__over__ssh.BapSshPublisher plugin="publish-over-ssh@1.20.1">
              <configName>Neo4j Server</configName>
              <verbose>false</verbose>
              <transfers>
                <jenkins.plugins.publish__over__ssh.BapSshTransfer>
                  <remoteDirectory>/home/ernie_admin/jenkins_jobs/${JOB_BASE_NAME}</remoteDirectory>
                  <sourceFiles>P2_studies/cc2/*, ${INPUT_FILE}</sourceFiles>
                  <excludes></excludes>
                  <removePrefix></removePrefix>
                  <remoteDirectorySDF>false</remoteDirectorySDF>
                  <flatten>false</flatten>
                  <cleanRemote>true</cleanRemote>
                  <noDefaultExcludes>false</noDefaultExcludes>
                  <makeEmptyDirs>false</makeEmptyDirs>
                  <patternSeparator>[, ]+</patternSeparator>
                  <execCommand>set -e
set -o pipefail

# Deploy
cd jenkins_jobs/${JOB_BASE_NAME}
cp P2_studies/cc2/*.sh .
chmod ug+x *.sh

# Run
./neo4j_calculations.sh ${INPUT_FILE} ${WORKING_DIRECTORY} ${OUTPUT_FILE} &amp;
pid=$!

# Wait on a background job completion
declare -i elapsed=0
declare -i WAIT_MSG_INTERVAL=1200 # Print every 20 minutes (should be &lt; ClientAliveInterval in /etc/ssh/sshd_config)
# `ps -p ${pid}` works on macOS and CentOS. On both OSes `ps ${pid}` works as well.
while ps -p ${pid} &gt;/dev/null; do
  sleep 1
  
  if ((++elapsed % WAIT_MSG_INTERVAL == 0)); then
    echo &quot;Waiting for the completion of the main script: $((elapsed / 60))m and counting.&quot;
  fi
done


# Return the exit code of the terminated background process. This works in Bash 4.4 despite what Bash docs say:
# &quot;If neither jobspec nor pid specifies an active child process of the shell, the return status is 127.&quot;
wait ${pid}

echo -e &quot;\nCollecting the output ...&quot;
# Preserve mode (and other attributes) to make generated file(s) group-writable at the target
scp -p &quot;$OUTPUT_FILE&quot; ernie_admin@ernie2:${WORKSPACE}/build
rm -f &quot;$OUTPUT_FILE&quot;</execCommand>
                  <execTimeout>0</execTimeout>
                  <usePty>false</usePty>
                  <useAgentForwarding>false</useAgentForwarding>
                </jenkins.plugins.publish__over__ssh.BapSshTransfer>
              </transfers>
              <useWorkspaceInPromotion>false</useWorkspaceInPromotion>
              <usePromotionTimestamp>false</usePromotionTimestamp>
            </jenkins.plugins.publish__over__ssh.BapSshPublisher>
          </publishers>
          <continueOnError>false</continueOnError>
          <failOnError>true</failOnError>
          <alwaysPublishFromMaster>false</alwaysPublishFromMaster>
          <hostConfigurationAccess class="jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin" reference="../.."/>
        </delegate>
      </delegate>
    </jenkins.plugins.publish__over__ssh.BapSshBuilderPlugin>
  </builders>
  <publishers>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.37">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <tokenCredentialId></tokenCredentialId>
      <botUser>false</botUser>
      <room></room>
      <sendAsText>false</sendAsText>
      <iconEmoji></iconEmoji>
      <username></username>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyRegression>true</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyEveryFailure>true</notifyEveryFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
      <customMessageSuccess></customMessageSuccess>
      <customMessageAborted></customMessageAborted>
      <customMessageNotBuilt></customMessageNotBuilt>
      <customMessageUnstable></customMessageUnstable>
      <customMessageFailure></customMessageFailure>
    </jenkins.plugins.slack.SlackNotifier>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>**/*.csv</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper>
      <varPasswordPairs/>
      <varMaskRegexes/>
    </com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.2"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.6.3">
      <colorMapName>Brackets Dark</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>